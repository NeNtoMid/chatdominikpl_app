const socket = io(), width = window.innerWidth > 0 ? window.innerWidth : screen.width; console.log("width:", width); const height = window.innerHeight > 0 ? window.innerHeight : screen.height; console.log("height:", height); let htmlCode = null, whichStylesheet = "pc"; width >= 1e3 ? htmlCode = ' \n  <article class="article">\n    <div class="button">\n      <a href="/" class="buttonlink">\n        <span class="button__mask"></span>\n        <span class="button__text">Left room</span>\n        <span class="button__text button__text--bis">Left room</span></a>\n    </div>\n    <h1 id="roomname" class="roomname"></h1>\n    \n    <h1 class="userstitle">Users:</h1>\n\n    <ul id="users" class="userslist"></ul>\n\n  </article>\n\n  <ul class="chat-thread" id="chat-messages"></ul>\n\n  <form class="chat-window" id="chat-form">\n    <input class="chat-window-message" name="chat-window-message" type="text" autocomplete="off" autofocus\n      id="chat-input" />\n  </form>\n  \n' : (htmlCode = '  \n  \n  <article class="article">\n    <div class="article__menu">\n      <div class="article__hamburger"></div>\n      <div class="article__hamburger"></div>\n      <div class="article__hamburger"></div>\n    </div>\n\n    <ul class="article__list">\n      <li class="article__limark"> &#x274C; &nbsp;</li>\n    \n      <li>\n        <h1 id="roomname" class="roomname"></h1>\n      </li>\n      <li>\n      <div class="article__div">\n        <div class="button">\n            <a href="/" class="buttonlink">\n              <span class="button__mask"></span>\n              <span class="button__text">Left room</span>\n              <span class="button__text button__text--bis">Left room</span></a>\n          </div>\n        </div>\n      \n        </li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>&nbsp;</li>\n        <li>\n          <h1 class="userstitle">Users:</h1>\n        </li>\n\n      <li>\n      <div class="article__div">\n   \n      <ul id="users" class="userslist"></ul>\n    </div>\n    </li>\n  </ul>\n\n\n\n\n</article>\n\n\n\n<ul class="chat-thread" id="chat-messages"></ul>\n<form class="chat-window" id="chat-form">\n  <input class="chat-window-message" name="chat-window-message" type="text" autocomplete="off" autofocus\n    id="chat-input" />\n</form>\n', whichStylesheet = "mobile"), document.body.insertAdjacentHTML("beforeend", htmlCode), document.head.insertAdjacentHTML("beforeend", `<link rel="stylesheet" href="/css/${"pc" === whichStylesheet ? "chat-pc" : "chat-mobile"}.css"/>\n  <link rel="stylesheet" href="/css/${"pc" === whichStylesheet ? "main-pc" : "main-mobile"}.css"/>\n  `); const chatForm = document.getElementById("chat-form"), chatName = document.getElementById("roomname"), chatInput = document.getElementById("chat-input"), chatMessages = document.getElementById("chat-messages"), usersList = document.getElementById("users"), { username: username, room: room } = Qs.parse(location.search, { ignoreQueryPrefix: !0 }); socket.emit("joinRoom", { username: username, room: room }); const hamburgerMenu = document.querySelector(".article__menu"), hamburgerMenuOff = document.querySelector(".article__limark"); if (hamburgerMenu) { const e = document.querySelector(".article__list"); hamburgerMenu.addEventListener("click", s => { e.style.display = "block", hamburgerMenu.style.display = "none" }), hamburgerMenuOff.addEventListener("click", s => { e.style.display = "none", hamburgerMenu.style.display = "block" }) } socket.on("message", e => { chatMessages.scrollTop = chatMessages.scrollHeight, outputMessage(e, "normal") }), socket.on("roomUsers", ({ room: e, users: s }) => { chatName.innerText = e, usersList.innerHTML = `\n  ${s.map(e => `<li>${e.username}</li>`).join("")}\n  ` }), socket.on("my-message", e => { chatMessages.scrollTop = chatMessages.scrollHeight, outputMessage(e, "my-message") }), chatForm.addEventListener("submit", e => { e.preventDefault(), "" !== chatInput.value && (console.log("chatInput.value:", chatInput.value), socket.emit("add-message", chatInput.value), chatInput.value = "", chatMessages.scrollTop = chatMessages.scrollHeight) }); const outputMessage = (e, s = "") => { const n = `\n      <li class='${s}'>\n          <p>${e.username} ${e.time} </p>\n          <p>${e.message}</p>\n         \n      </li>\n     `; chatMessages.insertAdjacentHTML("beforeend", n) };